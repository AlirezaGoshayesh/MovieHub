// Generated by Dagger (https://dagger.dev).
package com.test.moviehub.di;

import com.test.moviehub.data.remote.RemoteDataSource;
import com.test.moviehub.data.remote.connection.MService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideRemoteDataSourceFactory implements Factory<RemoteDataSource> {
  private final Provider<MService> serviceProvider;

  public DataModule_ProvideRemoteDataSourceFactory(Provider<MService> serviceProvider) {
    this.serviceProvider = serviceProvider;
  }

  @Override
  public RemoteDataSource get() {
    return provideRemoteDataSource(serviceProvider.get());
  }

  public static DataModule_ProvideRemoteDataSourceFactory create(
      Provider<MService> serviceProvider) {
    return new DataModule_ProvideRemoteDataSourceFactory(serviceProvider);
  }

  public static RemoteDataSource provideRemoteDataSource(MService service) {
    return Preconditions.checkNotNullFromProvides(DataModule.INSTANCE.provideRemoteDataSource(service));
  }
}
