// Generated by Dagger (https://dagger.dev).
package com.test.moviehub.di;

import com.test.moviehub.data.remote.connection.AuthTokenInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> loggingInterceptorProvider;

  private final Provider<AuthTokenInterceptor> authTokenInterceptorProvider;

  public NetworkModule_ProvidesOkHttpClientFactory(
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<AuthTokenInterceptor> authTokenInterceptorProvider) {
    this.loggingInterceptorProvider = loggingInterceptorProvider;
    this.authTokenInterceptorProvider = authTokenInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return providesOkHttpClient(loggingInterceptorProvider.get(), authTokenInterceptorProvider.get());
  }

  public static NetworkModule_ProvidesOkHttpClientFactory create(
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<AuthTokenInterceptor> authTokenInterceptorProvider) {
    return new NetworkModule_ProvidesOkHttpClientFactory(loggingInterceptorProvider, authTokenInterceptorProvider);
  }

  public static OkHttpClient providesOkHttpClient(HttpLoggingInterceptor loggingInterceptor,
      AuthTokenInterceptor authTokenInterceptor) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.providesOkHttpClient(loggingInterceptor, authTokenInterceptor));
  }
}
