// Generated by Dagger (https://dagger.dev).
package com.test.moviehub.di;

import android.content.Context;
import com.test.moviehub.data.remote.connection.MService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.converter.gson.GsonConverterFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideStickersServiceFactory implements Factory<MService> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<Context> mContextProvider;

  private final Provider<GsonConverterFactory> gsonConverterFactoryProvider;

  public NetworkModule_ProvideStickersServiceFactory(Provider<OkHttpClient> okHttpClientProvider,
      Provider<Context> mContextProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.mContextProvider = mContextProvider;
    this.gsonConverterFactoryProvider = gsonConverterFactoryProvider;
  }

  @Override
  public MService get() {
    return provideStickersService(okHttpClientProvider.get(), mContextProvider.get(), gsonConverterFactoryProvider.get());
  }

  public static NetworkModule_ProvideStickersServiceFactory create(
      Provider<OkHttpClient> okHttpClientProvider, Provider<Context> mContextProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider) {
    return new NetworkModule_ProvideStickersServiceFactory(okHttpClientProvider, mContextProvider, gsonConverterFactoryProvider);
  }

  public static MService provideStickersService(OkHttpClient okHttpClient, Context mContext,
      GsonConverterFactory gsonConverterFactory) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideStickersService(okHttpClient, mContext, gsonConverterFactory));
  }
}
